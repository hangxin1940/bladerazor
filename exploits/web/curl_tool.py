from typing import Type, Any

import httpx
import validators
from crewai_tools import BaseTool
from pydantic.v1 import BaseModel, Field

from config import logger


class CurlToolSchema(BaseModel):
    """CurlToolSchema 的查询参数"""
    url: str = Field(..., description="url地址")
    method: str = Field(..., description="请求方法，如 'GET' 或 'POST'")
    headers: dict[str, str] = Field(description="字典形式的 HTTP 头部")
    data: dict[str, str] = Field(description="用于 POST 请求的表单数据")
    json_data: Any = Field(description="用于 POST 请求的 JSON 数据", alias='json')
    params: str = Field(description="用于 GET 请求的查询参数")


class CurlTool(BaseTool):
    name: str = "Curl"
    description: str = "送HTTP请求并返回原始HTTP响应格式的字符串"
    args_schema: Type[BaseModel] = CurlToolSchema

    def __init__(self):
        super().__init__()
        logger.info("初始化工具 Curl")

    def _run(
            self,
            **kwargs: Any,
    ) -> Any:
        url = kwargs.pop('url', "")
        if url == "":
            return "url为空"

        if validators.url(url) is False:
            return "url地址不合法"

        method = kwargs.pop('method', "GET")
        headers = kwargs.pop('headers', None)
        data = kwargs.pop('data', None)
        json = kwargs.pop('json', None)
        params = kwargs.pop('params', None)
        try:
            logger.info("Curl: {}", url)
            with httpx.Client(verify=False) as client:
                response = client.request(
                    method=method,
                    url=url,
                    headers=headers,
                    data=data,
                    json=json,
                    params=params
                )
                status_line = f"{response.http_version} {response.status_code} {response.reason_phrase}\r\n"

                # 头部
                headers = ""
                for name, value in response.headers.items():
                    headers += f"{name}: {value}\r\n"

                # 确保响应体以新行结束
                body = response.text
                if not body.endswith('\r\n'):
                    body += '\r\n'

                # 组装完整的响应字符串
                return f"{status_line}{headers}\r\n{body}"

        except Exception as e:
            logger.error("获取失败: {}", e)
            return f"请求失败: {e}"
