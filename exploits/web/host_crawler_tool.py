from typing import Type, Any

import validators
from crewai_tools import BaseTool
from pydantic.v1 import BaseModel, Field

from helpers import fingers
from helpers.crawler import crawl_host
from persistence.database import DB
from config import logger


class HostCrawlerToolSchema(BaseModel):
    """HostCrawlerToolSchema 的查询参数"""
    host: str = Field(description="host地址, 一个完整的url地址，例如：`http://example.com`")


class HostCrawlerTool(BaseTool):
    name: str = "HostCrawler"
    description: str = "根据host地址，获取网页的图标、标题、响应头、HTML正文等信息，同时根据指纹判断其应用信息。"
    args_schema: Type[BaseModel] = HostCrawlerToolSchema
    db: DB | None = None

    class Config:
        arbitrary_types_allowed = True

    def __init__(self, db: DB):
        super().__init__()
        self.db = db
        logger.info("初始化工具 HostCrawler")

    def _run(
            self,
            **kwargs: Any,
    ) -> Any:
        host = kwargs.pop('host', "")
        if host == "":
            return "host为空"
        if validators.url(host) is False:
            return "host地址不合法"
        try:
            logger.info("HostCrawler: {}", host)
            html = crawl_host(host)
            matched = fingers.Match(html.headers, html.body, [i.inthash for i in html.favicons],
                                    [i.md5hash for i in html.favicons])
            # TODO
        except Exception as e:
            logger.error("获取失败: {}", e)
            return f"获取失败: {e}"
