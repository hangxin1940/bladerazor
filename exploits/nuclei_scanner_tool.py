from datetime import datetime
from typing import Type, Any

import validators
from crewai_tools import BaseTool
from pydantic.v1 import BaseModel, Field
from sqlalchemy import exc

from helpers.nuclei import Nuclei
from persistence.database import DB
from config import logger
from persistence.orm import Vul


class NucleiScannerToolSchema(BaseModel):
    """NucleiScannerToolSchema 的查询参数"""
    target: str = Field(..., description="host地址或ip地址, 例如：`https://example.com` 或 `example.com` 或 `1.1.1.1`")
    template: str = Field(None, description="模板名称, 例如：`http` 或 `vulnerabilities`")


class NucleiScannerTool(BaseTool):
    name: str = "Nuclei"
    description: str = "一款自动化的安全漏洞检测工具，可以进行进行快速、定制化的漏洞扫描。支持域名、URL、IP地址等。"
    args_schema: Type[BaseModel] = NucleiScannerToolSchema
    db: DB | None = None
    nuclei_path: str | None = None
    templates_path: str | None = None

    class Config:
        arbitrary_types_allowed = True

    def __init__(self, db: DB, nuclei_path: str = None, templates_path: str = None):
        super().__init__()
        self.db = db
        self.nuclei_path = nuclei_path
        self.templates_path = templates_path
        logger.info("初始化工具 Nuclei")

    def _run(
            self,
            **kwargs: Any,
    ) -> Any:
        target = kwargs.pop('target', "")
        if target == "":
            return "target为空"
        if (not validators.url(target) and not validators.ipv4(target)
                and not validators.ipv6(target) and not validators.domain(target)):
            return "target不合法"
        template = kwargs.pop('template', None)
        try:
            logger.info("Nuclei: {} {}", target, template)
            now = datetime.now()
            try:
                nuclei = Nuclei(nucleiAbsPath=self.nuclei_path, templatesAbsPath=self.templates_path)
                result = nuclei.scan(target, template)
                if len(result) == 0:
                    return "未找到任何结果"

                with self.db.DBSession() as session:
                    for data in result:
                        vuldb = Vul()
                        vuldb.target = target
                        vuldb.host = data.host
                        vuldb.type = data.type
                        vuldb.vul_name = data.vulnerability_name
                        vuldb.vul_detail = data.vulnerability_detail
                        vuldb.vul_point = data.vulnerable_at
                        vuldb.solution = data.solution
                        vuldb.cve_id = data.cve_id
                        vuldb.cwe_id = data.cwe_id
                        vuldb.severity = data.severity
                        vuldb.description = data.description
                        vuldb.extra_info = data.dict(
                            exclude_none=True,
                            exclude={'host', 'type', 'vulnerability_name', 'vulnerability_detail',
                                     'vulnerable_at', 'solution', 'cve_id', 'cwe_id', 'severity',
                                     'description'})
                        vuldb.source = self.name
                        vuldb.created = now
                        session.add(vuldb)
                    session.commit()
            except exc.SQLAlchemyError as e:
                logger.error("数据库错误: {}", e)
                return "数据库错误"
            except Exception as e:
                logger.error("其他错误: {}", e)
                return f"其他错误: {e}"
        except Exception as e:
            logger.error("获取失败: {}", e)
            return f"获取失败: {e}"
