import csv
import os
import tempfile
from datetime import datetime
from typing import Type, Any

import validators
from crewai_tools import BaseTool
from embedchain import App
from embedchain.models.data_type import DataType
from pydantic.v1 import BaseModel, Field
from sqlalchemy import exc

from helpers.nuclei import Nuclei
from persistence.database import DB
from config import logger
from persistence.orm import Vul, DuplicateException


class NucleiScannerToolSchema(BaseModel):
    """NucleiScannerToolSchema 的查询参数"""
    target: str = Field(..., description="host地址或ip地址, 例如：`https://example.com` 或 `example.com` 或 `1.1.1.1`")
    template: str = Field(None, description="模板名称, 例如：`http` 或 `vulnerabilities`")


class NucleiScannerTool(BaseTool):
    name: str = "Nuclei"
    description: str = "一款自动化的安全漏洞检测工具，可以进行进行快速、定制化的漏洞扫描。支持域名、URL、IP地址等。"
    args_schema: Type[BaseModel] = NucleiScannerToolSchema
    db: DB | None = None
    embedder: App | None = None
    nuclei_path: str | None = None
    templates_path: str | None = None
    task_id: int | None = None

    class Config:
        arbitrary_types_allowed = True

    def _init_embedder(self, embedder_cfg):
        self.embedder = App.from_config(config=embedder_cfg)

        data_sources = self.embedder.get_data_sources()
        if len(data_sources) > 0:
            return
        nuclei = Nuclei(nucleiAbsPath=self.nuclei_path, templatesAbsPath=self.templates_path)
        tpls = nuclei.nucleiTemplates(False)
        outputPath = os.path.join(tempfile.gettempdir(), 'nuclei_tpl_tmp.csv')
        datalist = []
        for tpl in tpls:
            tpldata = {
                'template': tpl.file,
                'dir': tpl.dir,
                'name': tpl.name.strip() if tpl.name is not None else None,
                'tags': ','.join(tpl.tags) if tpl.tags is not None and len(tpl.tags) > 0 else '',
                'description': tpl.description.strip() if tpl.description is not None else None,
            }

            datalist.append(tpldata)
        keys = datalist[0].keys()
        with open(outputPath, 'w', newline='', encoding='utf-8') as f:
            dict_writer = csv.DictWriter(f, fieldnames=keys)
            dict_writer.writeheader()
            dict_writer.writerows(datalist)

        self.embedder.add(source=outputPath, data_type=DataType.CSV)
        os.remove(outputPath)

    def __init__(self, db: DB, task_id: int, embedder_cfg: dict = None, nuclei_path: str = None,
                 templates_path: str = None):
        super().__init__()
        self.db = db
        self.task_id = task_id
        self.nuclei_path = nuclei_path
        self.templates_path = templates_path
        logger.info("初始化工具 Nuclei")
        # TODO 需要完善推理逻辑
        # self._init_embedder(embedder_cfg)

    def reasoningTemplates(self, target) -> [str]:
        # TODO 需要推理合适的模板
        # answer, sources = self.embedder.query(
        #     f'给我多个适合以下目标的模板名称:\n{target}', citations=True,
        #     kwargs={'n_results': 100})
        return ['http', 'network']

    def _run(
            self,
            **kwargs: Any,
    ) -> Any:
        target = kwargs.pop('target', "")
        if target == "":
            return "target为空"
        target_type = ""
        if validators.url(target):
            target_type = "url"
        elif validators.ipv4(target):
            target_type = "ipv4"
        elif validators.ipv6(target):
            target_type = "ipv6"
        elif validators.domain(target):
            target_type = "domain"
        else:
            return "target不合法"

        template = kwargs.pop('template', None)
        try:
            logger.info("Nuclei: {} {}", target, template)
            now = datetime.now()
            try:
                nuclei = Nuclei(nucleiAbsPath=self.nuclei_path, templatesAbsPath=self.templates_path)
                result = nuclei.scan(target, self.reasoningTemplates(target_type))
                if len(result) == 0:
                    return "未找到任何结果"

                with self.db.DBSession() as session:
                    for data in result:
                        vuldb = Vul()
                        vuldb.task_id = self.task_id
                        vuldb.target = target
                        vuldb.host = data.host
                        vuldb.type = data.type
                        vuldb.vul_name = data.vulnerability_name
                        vuldb.vul_detail = data.vulnerability_detail
                        vuldb.vul_point = data.vulnerable_at
                        vuldb.solution = data.solution
                        vuldb.cve_id = data.cve_id
                        vuldb.cwe_id = data.cwe_id
                        vuldb.severity = data.severity
                        vuldb.description = data.description
                        vuldb.extra_info = data.dict(
                            exclude_none=True,
                            exclude={'host', 'type', 'vulnerability_name', 'vulnerability_detail',
                                     'vulnerable_at', 'solution', 'cve_id', 'cwe_id', 'severity',
                                     'description'})
                        vuldb.source = self.name
                        vuldb.created = now
                        session.add(vuldb)
                        try:
                            session.add(vuldb)
                            session.commit()
                        except DuplicateException as e:
                            session.rollback()
                        except Exception as e:
                            raise
                return f"共发现{len(result)}个漏洞"
            except exc.SQLAlchemyError as e:
                logger.error("数据库错误: {}", e)
                return "数据库错误"
            except Exception as e:
                logger.error("其他错误: {}", e)
                return f"其他错误: {e}"
        except Exception as e:
            logger.error("获取失败: {}", e)
            return f"获取失败: {e}"
