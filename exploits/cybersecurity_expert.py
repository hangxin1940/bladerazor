from ipaddress import ip_address
from textwrap import dedent

import validators
from crewai import Agent, Task, Crew
from crewai_tools import BaseTool

from exploits.nuclei_scanner_tool import NucleiScannerTool
from exploits.web.host_crawler_tool import HostCrawlerTool
from persistence.database import DB
from config import logger


class CybersecurityExperts:
    """
    漏洞分析与利用专家
    根据已探明的网络资产，进行漏洞分析与利用。
    """

    # TODO
    def __init__(self, db: DB, llm=None, nuclei_path: str = None, templates_path: str = None, verbose: bool = False):
        self.llm = llm
        self.db = db
        self.nuclei_path = nuclei_path
        self.templates_path = templates_path
        self.verbose = verbose

    def agent_cyber_assets_fingerprinting_expert(self, llm=None, tools: [BaseTool] = []) -> Agent:
        logger.info("初始化代理 网络资产指纹识别专家")
        agent = Agent(
            role='网络资产指纹识别专家',
            goal='对网络资产进行指纹识别，以发现潜在的漏洞和弱点',
            backstory=dedent(
                """
                你是一名经验丰富的网络资产指纹识别专家，隶属于攻击团队。
                你的主要任务是利用指纹识别工具分析网络服务的特征。
                """),
            tools=tools,
            verbose=self.verbose,
            allow_delegation=True,
            max_rpm=300,
            # max_iter=1,
            llm=llm,
            cache=False,
        )

        if llm is not None:
            agent.llm = llm
        return agent

    def task_cyber_assets_fingerprinting(self, agent: Agent, target: str) -> Task:
        logger.info("初始化任务 网络资产指纹识别")
        return Task(
            agent=agent,
            description=dedent(
                f"""
                使用多种指纹识别工具对目标进行指纹识别，以发现潜在的漏洞和弱点:
                - 探明暴露的TCP/UDP端口的服务, 例如探明某个端口是SSH服务还是HTTP服务，以及服务的版本信息。
                - 探明Web应用程序的类型和版本信息，例如探明某个Web应用程序是WordPress还是Joomla，以及Web应用程序的版本信息。
                
                目标: `{target}`
                """),
            expected_output=dedent(
                """
                最终答案是本次探测结果数量，具体的结果已存储在数据库中。不要编造其他额外内容。
                """),
        )

    def _getFingerPrintingTools(self, task_id: int, target) -> []:
        tools = []
        if validators.url(target) or validators.domain(target):
            tools.append(HostCrawlerTool(self.db, task_id))
        if self.nuclei_path and self.templates_path:
            tools.append(
                NucleiScannerTool(self.db, task_id, nuclei_path=self.nuclei_path, templates_path=self.templates_path))
        return tools

    def _fingerPrintingCrew(self, task_id: int, target: str):

        agents = []
        tasks = []
        tools = self._getFingerPrintingTools(task_id, target)

        if len(tools) > 0:
            ag = self.agent_cyber_assets_fingerprinting_expert(self.llm, tools)
            agents.append(ag)

            tasks.append(self.task_cyber_assets_fingerprinting(ag, target))

        if len(agents) == 0 or len(tasks) == 0:
            raise Exception("无可用工具")

        logger.info("初始化智能体 指纹识别")
        return Crew(
            agents=agents,
            tasks=tasks,
            verbose=self.verbose,
        )

    def fingerprintingCrew(self, task_id: int, target: str):
        if validators.url(target):
            # url
            logger.info("url目标 {}", target)
        elif validators.domain(target):
            # domain
            logger.info("domain目标 {}", target)
        else:
            try:
                ip_address(target)
                logger.info("IP目标 {}", target)
            except ValueError:
                ValueError("目标类型不支持")
        return self._fingerPrintingCrew(task_id, target)
